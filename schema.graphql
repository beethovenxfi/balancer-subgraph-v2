type Balancer @entity(immutable: true) {
    id: Bytes!
    pools: [Pool!] @derivedFrom(field: "vault")
    lifetimeMetrics: LifetimeVaultMetric!
    dailyMetrics: [DailyVaultMetric!]! @derivedFrom(field: "vault")
    tokens: [VaultToken!]! @derivedFrom(field: "vault")
    dailyTokens: [DailyVaultToken!]! @derivedFrom(field: "vault")
    tokenPrices: [HourlyTokenPrice!]! @derivedFrom(field: "vault")
}

type LifetimeVaultMetric @entity {
    id: Bytes!
    vault: Balancer!
    startTime: Int!
    totalSwapVolume: BigDecimal!
    totalSwapFee: BigDecimal!
    swapCount: BigInt!
    totalLiquidity: BigDecimal!
}

type DailyVaultMetric @entity {
    id: Bytes!
    vault: Balancer!
    day: Int!
    startTime: Int!
    totalSwapVolume: BigDecimal!
    swapVolume24h: BigDecimal!
    swapVolumeChange24h: BigDecimal!
    totalSwapFee: BigDecimal!
    swapFee24h: BigDecimal!
    swapFeeChange24h: BigDecimal!
    totalLiquidity: BigDecimal!
    liquidityChange24h: BigDecimal!
    swapCount24h: BigInt!
    totalSwapCount: BigInt!
    swapCountChange24h: BigInt!
}

type DailyVaultToken @entity {
    id: Bytes!
    vault: Balancer!
    day: Int!
    startTime: Int!
    token: Token!
    tokenAddress: Bytes!
    totalBalance: BigDecimal!
    balanceChange24h: BigDecimal!
}

type HourlyTokenPrice @entity {
    id: Bytes!
    vault: Balancer!
    token: Token!
    tokenAddress: Bytes!
    hour: Int!
    startTime: Int!
    avgPriceUSD: BigDecimal!
    endPriceUSD: BigDecimal!
    dataPoints: BigDecimal!
}


type Pool @entity(immutable: true) {
    id: Bytes!
    address: Bytes!
    vault: Balancer!
    name: String!
    owner: Bytes
    poolType: String!
    phantomPool: Boolean!
    createTime: BigInt!
    shareToken: Token!
    swapConfig: SwapConfig!
    lifetimeMetrics: LifetimePoolMetric!
    dailyMetrics: [DailyPoolMetric!] @derivedFrom(field: "pool")
    tokenAddresses: [Bytes!]!
    tokens: [PoolToken!]! @derivedFrom(field: "pool") # underlying tokens
    dailyTokens: [DailyPoolToken!] @derivedFrom(field: "pool")

    tokenWeights: [TokenWeight!]! @derivedFrom(field: "pool")
    weightUpdates: [GradualWeightUpdate!]! @derivedFrom(field: "pool")

    userShares: [PoolShares!]! @derivedFrom(field: "pool")
    customPoolData: CustomPoolData

    investments: [PoolInvestmentAction!]! @derivedFrom(field: "pool")
    swaps: [Swap!]! @derivedFrom(field: "pool")
    interactions: [PoolInteraction!]! @derivedFrom(field: "pool")
}

type PoolAddressToId @entity(immutable: true) {
    id: Bytes!
    poolId: Bytes!
}


interface CustomPoolData {
    id: String!
    pool: Pool!
    poolId: Bytes!
}

type SwapConfig @entity {
    id: Bytes!
    fee: BigDecimal!
    managementFee: BigDecimal!
    gradualFeeUpdate: GradualSwapFeeUpdate
    swapEnabled: Boolean!
}

type GradualSwapFeeUpdate @entity {
    id: Bytes!
    scheduledTimestamp: Int!
    startTimestamp: Int!
    endTimestamp: Int!
    startFee: BigDecimal!
    endFee: BigDecimal!
}

#type WeightedPoolData implements CustomPoolData @entity(immutable: true) {
#    id: Bytes!
#    pool: Pool!
#    poolId: Bytes!
#}

type StablePoolData implements CustomPoolData @entity(immutable: true) {
    id: String!
    pool: Pool!
    poolId: Bytes!
    amp: Amp!
}

type LinearPoolData implements CustomPoolData @entity(immutable: true) {
    id: String!
    pool: Pool!
    poolId: Bytes!
    mainIndex: Int!
    wrappedIndex: Int!
    targets: LinearPoolTarget!
    priceRateProviders: [PriceRateProvider!] @derivedFrom(field: "poolData")
}

type LinearPoolTarget @entity {
    id: Bytes!
    lowerTarget: BigDecimal!
    upperTarget: BigDecimal!
}

type TokenWeight @entity {
    id: Bytes!
    pool: Pool!
    poolId: Bytes!
    token: Token!
    tokenAddress: Bytes!
    weight: BigDecimal!
}

type LifetimePoolMetric @entity {
    id: Bytes!
    pool: Pool!
    poolId: Bytes!
    startTime: Int!
    totalSwapVolume: BigDecimal!
    totalSwapFee: BigDecimal!
    totalLiquidity: BigDecimal!
    dilutedLiquidity: BigDecimal!
    totalShares: BigDecimal!
#    swaps: [Swap!] @derivedFrom(field: "poolMetric")
    swapCount: BigInt!
    holdersCount: BigInt!
}

type DailyPoolMetric @entity {
    id: Bytes!
    pool: Pool!
    poolId: Bytes!
    day: Int!
    startTime: Int!
    totalShares: BigDecimal!
    totalSwapVolume: BigDecimal!
    swapVolume24h: BigDecimal!
    swapVolumeChange24h: BigDecimal!
    totalSwapFee: BigDecimal!
    swapFee24h: BigDecimal!
    swapFeeChange24h: BigDecimal!
    totalLiquidity: BigDecimal!
    dilutedLiquidity: BigDecimal!
    liquidityChange24h: BigDecimal!
    swapCount24h: BigInt!
    totalSwapCount: BigInt!
    swapCountChange24h: BigInt!
}

type DailyPoolToken @entity {
    id: Bytes!
    pool: Pool!
    poolId: Bytes!
    day: Int!
    startTime: Int!
    token: Token!
    tokenAddress: Bytes!
    totalBalance: BigDecimal!
    balanceChange24h: BigDecimal!
}

type Amp @entity {
    id: Bytes!
    value: BigInt!
    gradualUpdate: GradualAmpUpdate
}

type GradualAmpUpdate @entity {
    id: Bytes!
    poolData: StablePoolData!
    scheduledTimestamp: Int!
    startTimestamp: Int!
    endTimestamp: Int!
    startAmp: BigInt!
    endAmp: BigInt!
}

type GradualWeightUpdate @entity {
    id: Bytes!
    pool: Pool!
    poolId: Bytes!
    scheduledTimestamp: Int!
    startTimestamp: Int!
    endTimestamp: Int!
    startWeights: [BigInt!]!
    endWeights: [BigInt!]!
}

type Token @entity(immutable: true) {
    id: Bytes!
    address: Bytes!
    name: String!
    decimals: Int!
    symbol: String!
    bpToken: Boolean!
    tokenPrice: [TokenPrice!]! @derivedFrom(field: "token")
}

type PoolShares @entity {
    id: Bytes!
    pool: Pool!
    poolId: Bytes!
    user: User!
    userAddress: Bytes!
    token: Token!
    tokenAddress: Bytes!
    balance: BigDecimal!
}

type VaultToken @entity {
    id: Bytes!
    vault: Balancer!
    token: Token!
    tokenAddress: Bytes!
    balance: BigDecimal!
    swapCount: BigInt!
}

type PoolToken @entity {
    id: Bytes!
    pool: Pool!
    poolId: Bytes!
    token: Token!
    tokenAddress: Bytes!
    balance: BigDecimal!
    swapCount: BigInt!
}

type Farm @entity(immutable: true) {
    id: Bytes!
    pool: Pool!
    poolId: Bytes!
    lifetimeFarmMetric: LifetimeFarmMetric!
    dailyFarmMetrics: [DailyFarmMetric!] @derivedFrom(field: "farm")
    userShares: [StakedPoolShares!]! @derivedFrom(field: "farm")
    emissions: [FarmEmissionProvider!]! @derivedFrom(field: "farm")
}

type StakedPoolShares @entity {
    id: Bytes!
    farm: Farm!
    farmId: Bytes!
    user: User!
    userAddress: Bytes!
    token: Token!
    tokenAddress: Bytes!
    balance: BigDecimal!
}

type LifetimeFarmMetric @entity {
    id: Bytes!
    totalShares: BigDecimal!
    totalLiquidity: BigDecimal!
}

type DailyFarmMetric @entity {
    id: Bytes!
    farm: Farm!
    day: Int!
    startTime: Int!
    totalLiquidity: BigDecimal!
    liqudityChange24h: BigDecimal!
}

type MasterChef @entity {
    id: Bytes!
    address: Bytes!
    emissionToken: Token!
    emissionPerBlock: BigDecimal!
    totalAllocation: BigInt!
    farms: [MasterChefFarmRewarderEmissionProvider!] @derivedFrom(field: "masterChef")
}

interface FarmEmissionProvider {
    id: Bytes!
    farm: Farm!
    farmId: Bytes!
    claimedEmissions: [ClaimedEmission!]!
}

type GaugeEmissionProvider implements FarmEmissionProvider @entity {
    id: Bytes!
    farm: Farm!
    farmId: Bytes!
    address: Bytes!
    streamer: GaugeStreamer!
    claimedEmissions: [ClaimedEmission!]!
}

type GaugeStreamer @entity {
    id: Bytes!
    address: Bytes!
}

type MasterChefFarmEmissionProvider implements FarmEmissionProvider @entity  {
    id: Bytes!
    masterChef: MasterChef!
    farm: Farm!
    farmId: Bytes!
    masterChefPoolId: Bytes!
    allocation: BigInt!
    claimedEmissions: [ClaimedEmission!]! @derivedFrom(field: "emissionProvider")
}

type MasterChefFarmRewarderEmissionProvider implements FarmEmissionProvider @entity  {
    id: Bytes!
    masterChef: MasterChef!
    farm: Farm!
    farmId: Bytes!
    id: Bytes!
    address: Bytes!
    rewardTokens: [MasterChefRewardToken!]! @derivedFrom(field: "rewarder")
    claimedEmissions: [ClaimedEmission!]! @derivedFrom(field: "emissionProvider")
}

type MasterChefRewardToken @entity {
    id: Bytes!
    tokenAddress: Bytes!
    token: Token!
    rewarder: MasterChefFarmRewarderEmissionProvider
    rewardPerSecond: BigDecimal!
}

type ClaimedEmission @entity(immutable: true) {
    id: Bytes!
    user: User
    token: Token!
    amount: BigDecimal!
    amountUSD: BigDecimal!
    timestamp: BigInt!
    block: BigInt!
    emissionProvider: FarmEmissionProvider!
    dailyUserPoolMetric: DailyUserPoolMetric!
}


type User @entity(immutable: true) {
    id: Bytes!
    address: Bytes!
    poolShares: [PoolShares!] @derivedFrom(field: "user")
    stakedPoolShares: [StakedPoolShares!]! @derivedFrom(field: "user")
    userInternalBalances: [UserInternalBalance!] @derivedFrom(field: "user")
    swaps: [Swap!] @derivedFrom(field: "user")
    interactions: [PoolInteraction!] @derivedFrom(field: "user")
    investments: [PoolInvestmentAction!] @derivedFrom(field: "user")
    lifetimeUserMetric: LifetimeUserMetric!
    dailyUserMetrics: [DailyUserMetric!] @derivedFrom(field: "user")
    dailyUserPoolMetrics: [DailyUserPoolMetric!] @derivedFrom(field: "user")
    claimedEmissions: [ClaimedEmission!]! @derivedFrom(field: "user")
}

type LifetimeUserMetric @entity {
    id: Bytes!
    user: User!
    userAddress: Bytes!
    swapVolume: BigDecimal!
    invested: BigDecimal!
    withdrawn: BigDecimal!
    claimedEmissions: BigDecimal!
}

type DailyUserMetric @entity {
    id: Bytes!
    user: User!
    userAddress:Bytes!
    day: Int!
    startTime: Int!
    swapVolume: BigDecimal!
    invested: BigDecimal!
    withdrawn: BigDecimal!
    claimedEmissions: BigDecimal!
}

type DailyUserPoolMetric @entity {
    id: Bytes!
    user: User!
    userAddress: Bytes!
    pool: Pool!
    poolId: Bytes!
    startTime: Int!
    day: Int!
    totalShares: BigDecimal!
    swapVolume: BigDecimal!
    invested: BigDecimal!
    withdrawn: BigDecimal!
    claimedEmissions: [ClaimedEmission!]! @derivedFrom(field: "dailyUserPoolMetric")
    swaps: [Swap!] @derivedFrom(field: "dailyUserPoolMetric")
    interactions: [PoolInteraction!] @derivedFrom(field: "dailyUserPoolMetric")
    investments: [PoolInvestmentAction!] @derivedFrom(field: "dailyUserPoolMetric")
}


type UserInternalBalance @entity {
    id: Bytes!
    user: User!
    userAddress: Bytes!
    token: Token!
    tokenAddress: Bytes!
    balance: BigDecimal!
}

type TokenPrice @entity {
    id: Bytes! # address of token + address of pricing asset
    token: Token!
    tokenAddress: Bytes!
    amount: BigDecimal!
    pricingAsset: Bytes! # address of stable asset
    price: BigDecimal!
    block: BigInt!
    timestamp: Int!
    priceUSD: BigDecimal!
}

type LatestTokenPrice @entity {
    id: Bytes!
    token: Token!
    tokenAddress: Bytes!
    priceUSD: BigDecimal!
}

type PriceRateProvider @entity {
    id: Bytes!
    token: Token!
    tokenAddress: Bytes!
    poolData: LinearPoolData!
    address: Bytes!
    rate: BigDecimal!
    lastCached: Int!
    cacheDuration: Int!
    cacheExpiry: Int!
}

interface PoolInteraction {
    id: ID!
    pool: Pool!
    poolId: Bytes!
    timestamp: Int!
    sender: Bytes!
    user: User!
    userAddress: Bytes!
    dailyUserPoolMetric: DailyUserPoolMetric!
    valueUSD: BigDecimal!
    tx: Bytes!
}

interface PoolInvestmentAction {
    id: ID!
    sender: Bytes!
    pool: Pool!
    poolId: Bytes!
    tokenAddresses: [Bytes!]!
    amounts: [BigDecimal!]!
    user: User!
    userAddress: Bytes!
    dailyUserPoolMetric: DailyUserPoolMetric!
    timestamp: Int!
    valueUSD: BigDecimal!
    tx: Bytes!
}

type PoolJoin implements PoolInteraction & PoolInvestmentAction  @entity(immutable: true) {
    id: ID!
    sender: Bytes!
    pool: Pool!
    poolId: Bytes!
    tokenAddresses: [Bytes!]!
    amounts: [BigDecimal!]!
    user: User!
    userAddress: Bytes!
    dailyUserPoolMetric: DailyUserPoolMetric!
    timestamp: Int!
    valueUSD: BigDecimal!
    tx: Bytes!
}


type PoolExit implements PoolInteraction & PoolInvestmentAction  @entity(immutable: true) {
    id: ID!
    sender: Bytes!
    pool: Pool!
    poolId: Bytes!
    tokenAddresses: [Bytes!]!
    amounts: [BigDecimal!]!
    user: User!
    userAddress: Bytes!
    dailyUserPoolMetric: DailyUserPoolMetric!
    timestamp: Int!
    valueUSD: BigDecimal!
    tx: Bytes!
}

type Swap implements PoolInteraction  @entity(immutable: true) {
    id: ID!
    sender: Bytes!
    pool: Pool!
    poolId: Bytes!
    tokenIn: Token!
    tokenInAddress: Bytes!
    tokenOut: Token!
    tokenOutAddress: Bytes!
    amountIn: BigDecimal!
    amountOut: BigDecimal!
    user: User!
    userAddress: Bytes!
    dailyUserPoolMetric: DailyUserPoolMetric!
    valueUSD: BigDecimal!
    timestamp: Int!
    tx: Bytes!
}


#type Swap @entity(immutable: true) {
#    id: ID!
#    caller: Bytes!
#    tokenIn: Bytes!
#    tokenInSym: String!
#    tokenOut: Bytes!
#    tokenOutSym: String!
#    tokenAmountIn: BigDecimal!
#    tokenAmountOut: BigDecimal!
#    poolId: Pool!
#    userAddress: User!
#    timestamp: Int!
#    tx: Bytes!
#    valueUSD: BigDecimal!
#}
